{"version":3,"sources":["A:/Windows/Documents/GitHub/synth-js/node_modules/browser-pack/_prelude.js","A:/Windows/Documents/GitHub/synth-js/node_modules/base64-js/index.js","A:/Windows/Documents/GitHub/synth-js/node_modules/buffer/index.js","A:/Windows/Documents/GitHub/synth-js/node_modules/ieee754/index.js","A:/Windows/Documents/GitHub/synth-js/src/midi.js","A:/Windows/Documents/GitHub/synth-js/src/midi2wav.js","A:/Windows/Documents/GitHub/synth-js/src/utils/timer.js","A:/Windows/Documents/GitHub/synth-js/src/wav.js","index.js"],"names":["f","exports","module","define","amd","window","global","self","this","synth","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","extraBytes","parts","len2","push","start","end","output","num","lookup","join","Uint8Array","Array","indexOf","base64","ieee754","K_MAX_LENGTH","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","createBuffer","RangeError","buf","__proto__","prototype","arg","encodingOrOffset","from","TypeError","allocUnsafe","value","fromString","string","encoding","isEncoding","actual","write","slice","ArrayBuffer","isView","fromArrayLike","isInstance","buffer","fromArrayBuffer","array","byteOffset","undefined","valueOf","b","obj","isBuffer","checked","copy","numberIsNaN","type","isArray","data","Symbol","toPrimitive","assertSize","size","toString","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","out","utf8Slice","asciiSlice","ret","Math","min","String","fromCharCode","latin1Slice","utf16leSlice","bytes","res","swap","m","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","j","asciiWrite","offset","blitBuffer","str","byteArray","ucs2Write","units","hi","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","apply","kMaxLength","TYPED_ARRAY_SUPPORT","foo","console","error","Object","defineProperty","enumerable","get","species","configurable","writable","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","pos","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","remaining","hexWrite","Number","strLen","parsed","parseInt","substr","toJSON","_arr","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","set","INVALID_BASE64_RE","Infinity","leadSurrogate","split","src","dst","constructor","name","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","abs","isNaN","floor","log","LN2","_typeof","iterator","_defineProperties","props","descriptor","key","input","hint","prim","MIDIStream","lastEventTypeByte","Constructor","protoProps","staticProps","readUint8","id","readString","readUint32","event","eventTypeByte","delta","readVarUint","hourByte","meta","subTypeByte","subType","readUint16","skip","readUint24","frameRate","0","2","3","hour","minute","second","frame","subFrame","numerator","denominator","metronome","thirtyseconds","scale","unk","param","eventType","chan","channel","noteNumber","velocity","amount","controllerNumber","controllerValue","_createForOfIteratorHelper","allowArrayLike","normalCompletion","didErr","err","it","step","next","done","_e2","return","minLen","_arrayLikeToArray","test","F","_e","arr2","WAV","Timer","args","midiStream","verbose","header","readChunk","SyntaxError","headerStream","trackCount","timeDivision","tracks","progression","events","trackChunk","trackStream","track","keep","readEvent","Skip","_step","_iterator","timer","_event","_i","addCriticalPoint","_i2","_step2","_track","_delta","map","Map","_iterator2","semitone","_velocity","notes","note","_event2","getTime","has","pop","time","amplitude","toFixed","sort","_step3","maxVelocity","maxVelocityTime","maxChord","maxChordTime","chord","_iterator3","_event3","maxAmplitude","channels","wav","sampleRate","bitsPerSample","writeProgression","duration","ticksPerBeat","criticalPoints","microsecondsPerBeat","criticalPoint","_slicedToArray","_s","_x","_r","_n","_d","re","numChannels","instance","bytesPerSample","view","DataView","pointer","ChunkID","ChunkSize","Format","SubChunk1ID","SubChunk1Size","AudioFormat","NumChannels","SampleRate","ByteRate","BlockAlign","BitsPerSample","SubChunk2ID","SubChunk2Size","tone","octave","tones","octaves","accidentals","_ref3","match","accidental","-1","4","5","6","7","8","9","10","bb","","#","##","C","D","E","G","A","B","octaveIndex","toneIndex","charAt","setUint8","getUint8","getString","setString","getUint32","uint","setUint32","getUint16","setUint16","samples","Blob","typedData","sample","round","_ref","k","_ref$amplitude","blend","reset","frequency","PI","blocksOut","nonZero","fade","stop","blocksIn","skipChannel","sin","relativeDuration","_notes$i","amp","off","seek","writeNote","rest","secs","midiToWav"],"mappings":"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","file":"synth.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict';\r\n\r\nclass MIDIStream {\r\n  /**\r\n   * @param {ArrayBufferLike} buffer\r\n   */\r\n  constructor(buffer) {\r\n    this.data = new Uint8Array(buffer);\r\n    this.byteOffset = 0;\r\n    this.lastEventTypeByte = 0x00;\r\n  }\r\n\r\n  /**\r\n   * @param {number} byteLength\r\n   * @returns {string}\r\n   */\r\n  readString(byteLength) {\r\n    const byteOffset = this.byteOffset;\r\n    let str = '';\r\n\r\n    for (let i = 0; i < byteLength; i++) {\r\n      str += String.fromCharCode(this.data[byteOffset + i]);\r\n    }\r\n\r\n    this.byteOffset += byteLength;\r\n\r\n    return str;\r\n  }\r\n\r\n  readUint32() {\r\n    const byteOffset = this.byteOffset;\r\n    const value = (\r\n      (this.data[byteOffset    ] << 24) |\r\n      (this.data[byteOffset + 1] << 16) |\r\n      (this.data[byteOffset + 2] <<  8) |\r\n      (this.data[byteOffset + 3]      )\r\n    );\r\n\r\n    this.byteOffset += 4;\r\n\r\n    return value;\r\n  }\r\n\r\n  readUint24() {\r\n    const byteOffset = this.byteOffset;\r\n    const value = (\r\n      (this.data[byteOffset    ] << 16) |\r\n      (this.data[byteOffset + 1] <<  8) |\r\n      (this.data[byteOffset + 2]      )\r\n    );\r\n\r\n    this.byteOffset += 3;\r\n\r\n    return value;\r\n  }\r\n\r\n  readUint16() {\r\n    const byteOffset = this.byteOffset;\r\n    const value = (\r\n      (this.data[byteOffset    ] << 8) |\r\n      (this.data[byteOffset + 1]     )\r\n    );\r\n\r\n    this.byteOffset += 2;\r\n\r\n    return value;\r\n  }\r\n\r\n  readUint8() {\r\n    const byteOffset = this.byteOffset;\r\n    const value = this.data[byteOffset];\r\n\r\n    this.byteOffset += 1;\r\n\r\n    return value;\r\n  }\r\n\r\n  readInt8() {\r\n    const byteOffset = this.byteOffset;\r\n    let value = this.data[byteOffset];\r\n\r\n    if ((value & 0x80) === 0x80) {\r\n      value ^= 0xFFFFFF00;\r\n    }\r\n\r\n    this.byteOffset += 1;\r\n\r\n    return value;\r\n  }\r\n\r\n  readVarUint() {\r\n    let value = 0;\r\n    let uint8;\r\n\r\n    do {\r\n      uint8 = this.readUint8();\r\n      value = (value << 7) + (uint8 & 0x7F);\r\n    } while ((uint8 & 0x80) === 0x80);\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * @param {number} byteLength\r\n   */\r\n  skip(byteLength) {\r\n    this.byteOffset += byteLength;\r\n  }\r\n\r\n  readChunk() {\r\n    const id = this.readString(4);\r\n    const length = this.readUint32();\r\n    const byteOffset = this.byteOffset;\r\n\r\n    this.byteOffset += length;\r\n\r\n    const data = this.data.slice(byteOffset, this.byteOffset);\r\n\r\n    return {\r\n      id: id,\r\n      length: length,\r\n      data: data.buffer\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @template {keyof EventMap} T\r\n   * @template {EventMap[T] extends undefined ? never : Exclude<keyof EventMap[T], number | symbol>} S\r\n   * @template {S extends keyof EventMap[T] ? (\"value\" extends keyof EventMap[T][S] ? EventMap[T][S][\"value\"] : never) : never} [V=S extends keyof EventMap[T] ? (\"value\" extends keyof EventMap[T][S] ? EventMap[T][S][\"value\"] : never) : never]\r\n   * @template {S extends keyof EventMap[T] ? Omit<EventMap[T][S], \"value\"> : {}} [E = S extends keyof EventMap[T] ? Omit<EventMap[T][S], \"value\"> : {}]\r\n   * @returns {Event<T, S, V, E>}\r\n   */\r\n  readEvent() {\r\n    /** @type {Event<T, S, V, E>} */\r\n    const event = {};\r\n\r\n    event.delta = this.readVarUint();\r\n\r\n    let eventTypeByte = this.readUint8();\r\n\r\n    // system event\r\n    if ((eventTypeByte & 0xF0) === 0xF0) {\r\n      switch (eventTypeByte) {\r\n      // meta event\r\n      case 0xFF:\r\n        /** @type {Event<\"meta\", keyof MetaEvent, any, {}>} */\r\n        // @ts-expect-error\r\n        const meta = event;\r\n        meta.type = \"meta\";\r\n\r\n        const subTypeByte = this.readUint8();\r\n        let length = this.readVarUint();\r\n\r\n        switch (subTypeByte) {\r\n        case 0x00:\r\n          meta.subType = 'sequenceNumber';\r\n          if (length === 2)\r\n            event.value = this.readUint16();\r\n          else\r\n            this.skip(length);\r\n          break;\r\n        case 0x01:\r\n          meta.subType = 'text';\r\n          event.value = this.readString(length);\r\n          break;\r\n        case 0x02:\r\n          meta.subType = 'copyrightNotice';\r\n          event.value = this.readString(length);\r\n          break;\r\n        case 0x03:\r\n          meta.subType = 'trackName';\r\n          event.value = this.readString(length);\r\n          break;\r\n        case 0x04:\r\n          meta.subType = 'instrumentName';\r\n          event.value = this.readString(length);\r\n          break;\r\n        case 0x05:\r\n          meta.subType = 'lyrics';\r\n          event.value = this.readString(length);\r\n          break;\r\n        case 0x06:\r\n          meta.subType = 'marker';\r\n          event.value = this.readString(length);\r\n          break;\r\n        case 0x07:\r\n          meta.subType = 'cuePoint';\r\n          event.value = this.readString(length);\r\n          break;\r\n        case 0x20:\r\n          meta.subType = 'midiChannelPrefix';\r\n          if (length === 1)\r\n            event.value = this.readUint8();\r\n          else\r\n            this.skip(length);\r\n          break;\r\n        case 0x2F:\r\n          meta.subType = 'endOfTrack';\r\n          if (length > 0)\r\n            this.skip(length);\r\n          break;\r\n        case 0x51:\r\n          meta.subType = 'setTempo';\r\n          if (length === 3)\r\n            event.value = this.readUint24();\r\n          else\r\n            this.skip(length)\r\n          break;\r\n        case 0x54:\r\n          meta.subType = 'smpteOffset';\r\n          if (length === 5) {\r\n            const hourByte = this.readUint8();\r\n            event.value = {\r\n              frameRate: ({\r\n                0x00: 24,\r\n                0x01: 25,\r\n                0x02: 29.97,\r\n                0x03: 30\r\n              }[hourByte >>> 6]),\r\n              hour: (hourByte & 0x3F),\r\n              minute: this.readUint8(),\r\n              second: this.readUint8(),\r\n              frame: this.readUint8(),\r\n              subFrame: this.readUint8()\r\n            };\r\n          } else {\r\n            this.skip(length);\r\n          }\r\n          break;\r\n        case 0x58:\r\n          meta.subType = 'timeSignature';\r\n          if (length === 4) {\r\n            event.value = {\r\n              numerator: this.readUint8(),\r\n              denominator: 1 << this.readUint8(),\r\n              metronome: this.readUint8(),\r\n              thirtyseconds: this.readUint8()\r\n            };\r\n          } else {\r\n            this.skip(length);\r\n          }\r\n          break;\r\n        case 0x59:\r\n          meta.subType = 'keySignature';\r\n          if (length === 2) {\r\n            event.value = {\r\n              key: this.readInt8(),\r\n              scale: this.readUint8()\r\n            };\r\n          } else {\r\n            this.skip(length);\r\n          }\r\n          break;\r\n        case 0x7F:\r\n          meta.subType = 'sequencerSpecific';\r\n          event.value = this.readString(length);\r\n          break;\r\n        default:\r\n          meta.subType = 'unknown';\r\n          event.value = this.readString(length);\r\n        }\r\n        break;\r\n      // sysex event\r\n      case 0xF0:\r\n        /** @type {Event<\"sysEx\", Exclude<keyof SysExEvent, number | symbol>, any, {}>} */\r\n        // @ts-expect-error\r\n        const sysex = event;\r\n        sysex.type = 'sysEx';\r\n\r\n        length = this.readVarUint();\r\n\r\n        event.value = this.readString(length);\r\n\r\n        break;\r\n      case 0xF7:\r\n        /** @type {Event<\"dividedSysEx\", Exclude<keyof DividedSysExEvent, number | symbol>, any, {}>} */\r\n        // @ts-expect-error\r\n        const divsysex = event;\r\n        divsysex.type = 'dividedSysEx';\r\n\r\n        length = this.readVarUint();\r\n\r\n        event.value = this.readString(length);\r\n\r\n        break;\r\n      default:\r\n        /** @type {Event<\"unknown\", Exclude<keyof UnknownEvent, number | symbol>, any, {}>} */\r\n        // @ts-expect-error\r\n        const unk = event;\r\n        unk.type = 'unknown';\r\n        unk.subType = \"unknown\";\r\n\r\n        length = this.readVarUint();\r\n\r\n        event.value = this.readString(length);\r\n      }\r\n    // channel event\r\n    } else {\r\n      let param;\r\n\r\n      // if the high bit is low\r\n      // use running event type mode\r\n      if ((eventTypeByte & 0x80) === 0x00) {\r\n        param = eventTypeByte;\r\n        eventTypeByte = this.lastEventTypeByte;\r\n      } else {\r\n        param = this.readUint8();\r\n        this.lastEventTypeByte = eventTypeByte;\r\n      }\r\n\r\n      const eventType = eventTypeByte >> 4;\r\n\r\n      /** @type {Event<\"channel\", keyof ChannelEvent, any, { channel: number; }>} */\r\n      // @ts-expect-error\r\n      const chan = event;\r\n      chan.channel = eventTypeByte & 0x0F;\r\n      chan.type = 'channel';\r\n\r\n      switch (eventType) {\r\n      case 0x08:\r\n        chan.subType = 'noteOff';\r\n\r\n        event.value = {\r\n          noteNumber: param,\r\n          velocity: this.readUint8()\r\n        };\r\n        break;\r\n      case 0x09:\r\n        event.value = {\r\n          noteNumber: param,\r\n          velocity: this.readUint8()\r\n        };\r\n\r\n        // some midi implementations use a noteOn\r\n        // event with 0 velocity to denote noteOff\r\n        if (event.value.velocity === 0) {\r\n          chan.subType = 'noteOff';\r\n        } else {\r\n          chan.subType = 'noteOn';\r\n        }\r\n        break;\r\n      case 0x0A:\r\n        chan.subType = 'noteAftertouch';\r\n\r\n        event.value = {\r\n          noteNumber: param,\r\n          amount: this.readUint8()\r\n        };\r\n        break;\r\n      case 0x0B:\r\n        chan.subType = 'controller';\r\n\r\n        event.value = {\r\n          controllerNumber: param,\r\n          controllerValue: this.readUint8()\r\n        };\r\n        break;\r\n      case 0x0C:\r\n        chan.subType = 'programChange';\r\n        event.value = param;\r\n        break;\r\n      case 0x0D:\r\n        chan.subType = 'channelAftertouch';\r\n        event.value = param;\r\n        break;\r\n      case 0x0E:\r\n        chan.subType = 'pitchBend';\r\n        event.value = param + (this.readUint8() << 7);\r\n        break;\r\n      default:\r\n        chan.subType = 'unknown';\r\n        event.value = (param << 8) + this.readUint8();\r\n      }\r\n    }\r\n\r\n    return event;\r\n  }\r\n};\r\n\r\n/**\r\n * @typedef {Object} EventMap\r\n * @property {MetaEvent} meta\r\n * @property {SysExEvent} sysEx\r\n * @property {DividedSysExEvent} dividedSysEx\r\n * @property {UnknownEvent} unknown\r\n * @property {ChannelEvent} channel\r\n */\r\n\r\n/**\r\n * @typedef {Object} MetaEvent\r\n * @property {{ value: number; }} sequenceNumber\r\n * @property {{ value: string; }} text\r\n * @property {{ value: string; }} copyrightNotice\r\n * @property {{ value: string; }} trackName\r\n * @property {{ value: string; }} instrumentName\r\n * @property {{ value: string; }} lyrics\r\n * @property {{ value: string; }} marker\r\n * @property {{ value: string; }} cuePoint\r\n * @property {{ value: number | undefined; }} midiChannelPrefix\r\n * @property {{ value: undefined; }} endOfTrack\r\n * @property {{ value: number | undefined; }} setTempo\r\n * @property {{ value: { frameRate: number; hour: number; minute: number; second: number; frame: number; subFrame: number; } | undefined; }} smpteOffset\r\n * @property {{ value: { numerator: number; denominator: number; metronome: number; thirtyseconds: number; } | undefined; }} timeSignature\r\n * @property {{ value: { key: number; scale: number; } | undefined; }} keySignature\r\n * @property {{ value: number; }} sequencerSpecific\r\n * @property {{ value: number; }} unknown\r\n */\r\n\r\n/**\r\n * @typedef {{ [K in any]: { value: string; }; }} SysExEvent\r\n */\r\n\r\n/**\r\n * @typedef {{ [K in any]: { value: string; }; }} DividedSysExEvent\r\n */\r\n\r\n/**\r\n * @typedef {{ unknown: { value: string; }; }} UnknownEvent\r\n */\r\n\r\n/**\r\n * @typedef {Object} ChannelEvent\r\n * @property {{ channel: number; value: { noteNumber: number; } }} noteOff\r\n * @property {{ channel: number; value: { noteNumber: number; } }} noteOn\r\n * @property {{ channel: number; value: { noteNumber: number; amount: number; } }} noteAftertouch\r\n * @property {{ channel: number; value: { controllerNumber: number; controllerValue: number; } }} controller\r\n * @property {{ channel: number; value: number; }} programChange\r\n * @property {{ channel: number; value: number; }} channelAftertouch\r\n * @property {{ channel: number; value: number; }} pitchBend\r\n * @property {{ channel: number; value: number; }} unknown\r\n */\r\n\r\n/**\r\n * @template {keyof EventMap} [T=keyof EventMap]\r\n * @template {Exclude<keyof EventMap[T], number | symbol> | undefined} [S=undefined]\r\n * @template {S extends keyof EventMap[T] ? (\"value\" extends keyof EventMap[T][S] ? EventMap[T][S][\"value\"] : never) : never} [V=S extends keyof EventMap[T] ? (\"value\" extends keyof EventMap[T][S] ? EventMap[T][S][\"value\"] : never) : never]\r\n * @template {S extends keyof EventMap[T] ? Omit<EventMap[T][S], \"value\"> : {}} [E = S extends keyof EventMap[T] ? Omit<EventMap[T][S], \"value\"> : {}]\r\n * @typedef {{ delta: number; subType: S; type: T; value: any } & E} Event\r\n */\r\n\r\nmodule.exports = MIDIStream;\r\n","'use strict';\r\n\r\nconst WAV = require('./wav');\r\nconst MIDIStream = require('./midi');\r\nconst Timer = require('./utils/timer');\r\n\r\n/**\r\n * @template {keyof MIDIStream.EventMap} T\r\n * @template {MIDIStream.EventMap[T] extends undefined ? never : Exclude<keyof MIDIStream.EventMap[T], number | symbol>} S\r\n * @template {S extends keyof MIDIStream.EventMap[T] ? (\"value\" extends keyof MIDIStream.EventMap[T][S] ? MIDIStream.EventMap[T][S][\"value\"] : never) : never} [V=S extends keyof MIDIStream.EventMap[T] ? (\"value\" extends keyof MIDIStream.EventMap[T][S] ? MIDIStream.EventMap[T][S][\"value\"] : never) : never]\r\n * @template {S extends keyof MIDIStream.EventMap[T] ? Omit<MIDIStream.EventMap[T][S], \"value\"> : {}} [E = S extends keyof MIDIStream.EventMap[T] ? Omit<MIDIStream.EventMap[T][S], \"value\"> : {}]\r\n * @param {ArrayBufferLike} buffer\r\n * @param {{ verbose?: boolean; Skip?: Array<{ [subType: string]: string }> | ((track: Array<MIDIStream.Event<T, S, V, E>>) => boolean); channels?: number; sampleRate?: number; bitsPerSample?: number; duration?: number; }} args\r\n * @returns {WAV | null}\r\n */\r\nmodule.exports = function midiToWav(buffer, args = {}) {\r\n  if (args.verbose) {\r\n    console.log('parsing MIDI header...');\r\n  }\r\n\r\n  const midiStream = new MIDIStream(buffer);\r\n  const header = midiStream.readChunk();\r\n\r\n  if (header.id !== 'MThd' || header.length !== 6) {\r\n    throw new SyntaxError('malformed header');\r\n  }\r\n\r\n  const headerStream = new MIDIStream(header.data);\r\n  const trackCount = headerStream.readUint16();\r\n  const timeDivision = headerStream.readUint16();\r\n  const tracks = [];\r\n  const progression = [];\r\n  const events = [];\r\n  let maxAmplitude;\r\n\r\n  for (let i = 0; i < trackCount; i++) {\r\n    if (args.verbose) {\r\n      console.log(`parsing track ${i + 1}...`);\r\n    }\r\n\r\n    const trackChunk = midiStream.readChunk();\r\n\r\n    if (trackChunk.id !== 'MTrk') {\r\n      continue;\r\n    }\r\n\r\n    const trackStream = new MIDIStream(trackChunk.data);\r\n    /** @type {Array<MIDIStream.Event<T, S, V, E>>} */\r\n    const track = [];\r\n    let keep = true;\r\n\r\n    // determine whether applied filter will remove the current track while populating it\r\n    while (keep && trackStream.byteOffset < trackChunk.length) {\r\n      /** @type {MIDIStream.Event<T, S, V, E>} */\r\n      let event = trackStream.readEvent();\r\n      track.push(event);\r\n\r\n      if (typeof event.value === 'string') {\r\n        if (args.verbose) {\r\n          console.log(`{\"${event.subType}\":\"${event.value}\"}`);\r\n        }\r\n\r\n        if (Array.isArray(args.Skip)) {\r\n          for (const element of args.Skip) {\r\n            if (element[event.subType] === event.value) {\r\n              if (args.verbose) {\r\n                console.log(`skip match found: {\"${event.subType}\":\"${event.value}\"}`);\r\n              }\r\n\r\n              keep = false;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (typeof args.Skip === 'function') {\r\n      keep = !args.Skip(track);\r\n    }\r\n\r\n    if (keep) {\r\n      tracks.push(track);\r\n    } else if (args.verbose) {\r\n      console.log(`skipping track ${i + 1}...`);\r\n    }\r\n  }\r\n\r\n  if (timeDivision >>> 15 === 0) {\r\n    // use microseconds per beat\r\n    const timer = new Timer(timeDivision);\r\n\r\n    if (args.verbose) {\r\n      console.log('initializing timer...');\r\n    }\r\n\r\n    // set up timer with setTempo events\r\n    for (let i = 0, delta = 0, ticks = 0, event; i < tracks[0].length; i++) {\r\n      event = tracks[0][i];\r\n      delta += event.delta;\r\n      ticks += event.delta;\r\n\r\n      if (event.subType === 'setTempo') {\r\n        timer.addCriticalPoint(delta, event.value);\r\n        delta = 0;\r\n      }\r\n    }\r\n\r\n    // generate note data\r\n    for (let i = 0; i < tracks.length; i++) {\r\n      if (args.verbose) {\r\n        console.log(`generating progression from track ${i + 1}...`);\r\n      }\r\n\r\n      let track = tracks[i];\r\n      let delta = 0;\r\n      let map = new Map();\r\n\r\n      for (const element of track) {\r\n        let event = element;\r\n        delta += event.delta;\r\n\r\n        if (event.type === 'channel') {\r\n          const semitone = event.value.noteNumber;\r\n\r\n          if (event.subType === 'noteOn') {\r\n            let velocity = event.value.velocity;\r\n            let offset = timer.getTime(delta);\r\n\r\n            // use stack for simultaneous identical notes\r\n            if (map.has(semitone)) {\r\n              map.get(semitone).push({offset, velocity});\r\n            } else {\r\n              map.set(semitone, [{offset, velocity}]);\r\n            }\r\n\r\n            // to determine maximum total velocity for normalizing volume\r\n            events.push({velocity, delta, note: true});\r\n          } else if (event.subType === 'noteOff') {\r\n            const notes = map.get(semitone);\r\n\t          const note = notes ? notes.pop() : { offset: 0, velocity: 0 };\r\n\r\n            progression.push({\r\n              note: WAV.note(semitone),\r\n              time: timer.getTime(delta) - note.offset,\r\n              amplitude: note.velocity / 128,\r\n              offset: note.offset,\r\n            });\r\n\r\n            // to determine maximum total velocity for normalizing volume\r\n            events.push({velocity: note.velocity, delta, note: false});\r\n          }\r\n        } else if (args.verbose && event.type === 'meta') {\r\n          if (typeof event.value === 'string') {\r\n            console.log(`${timer.getTime(delta).toFixed(2)}s ${event.subType}: ${event.value}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (args.verbose) {\r\n      console.log('normalizing volume...');\r\n    }\r\n\r\n    events.sort(function (a, b) {\r\n      return a.delta - b.delta || Number(a.note) - Number(b.note);\r\n    });\r\n\r\n    if (args.verbose) {\r\n      console.log('total notes:', progression.length);\r\n      console.log('total time:', timer.getTime(events[events.length - 1].delta), 'seconds');\r\n    }\r\n\r\n    let maxVelocity = 1;\r\n    let maxVelocityTime = 0;\r\n    let velocity = 1;\r\n    let maxChord = 0;\r\n    let maxChordTime = 0;\r\n    let chord = 0;\r\n\r\n    for (const event of events) {\r\n      if (event.note) {\r\n        velocity += event.velocity;\r\n        chord++;\r\n\r\n        if (velocity > maxVelocity) {\r\n          maxVelocity = velocity;\r\n          maxVelocityTime = timer.getTime(event.delta);\r\n        }\r\n\r\n        if (chord > maxChord) {\r\n          maxChord = chord;\r\n          maxChordTime = timer.getTime(event.delta);\r\n        }\r\n      } else {\r\n        velocity -= event.velocity;\r\n        chord--;\r\n      }\r\n    }\r\n\r\n    // scaling factor for amplitude\r\n    maxAmplitude = 128 / maxVelocity;\r\n\r\n    if (args.verbose) {\r\n      console.log('setting volume to', maxAmplitude);\r\n      console.log('  maximum chord of', maxChord, 'at', maxChordTime, 'seconds');\r\n      console.log('  maximum velocity of', maxVelocity - 1, 'at', maxVelocityTime, 'seconds');\r\n    }\r\n  } else {\r\n    // use frames per second\r\n    // not yet implemented\r\n\r\n    console.log('Detected unsupported MIDI timing mode');\r\n\r\n    return null;\r\n\r\n    /*\r\n    let framesPerSecond = (division >>> 8) & 0x7F;\r\n    let ticksPerFrame = division & 0xFF;\r\n\r\n    if (framesPerSecond === 29) {\r\n      framesPerSecond = 29.97;\r\n    }\r\n\r\n    // seconds per tick = 1 / frames per second / ticks per frame\r\n    secsPerTick = 1 / framesPerSecond / ticksPerFrame;\r\n    */\r\n  }\r\n\r\n  // set to mono\r\n  args.channels = 1;\r\n\r\n  if (args.verbose) {\r\n    console.log('generating WAV buffer...');\r\n  }\r\n\r\n  const wav = new WAV(args.channels, args.sampleRate, args.bitsPerSample);\r\n\r\n  wav.writeProgression(progression, maxAmplitude, [0], true, true, args.duration);\r\n\r\n  return wav;\r\n};\r\n","'use strict';\r\n\r\n/**\r\n * utility class to calculate time from delta ticks\r\n * when MIDI file has several `setTempo` events\r\n */\r\nclass Timer {\r\n  /**\r\n   * @param {number} ticksPerBeat\r\n   */\r\n  constructor(ticksPerBeat) {\r\n    this.ticksPerBeat = ticksPerBeat;\r\n    /** @type {Array<{ delta: number; microsecondsPerBeat: number; }>} */\r\n    this.criticalPoints = [];\r\n  }\r\n\r\n  /**\r\n   * delta represents ticks since last time change\r\n   * @param {number} delta\r\n   * @param {number} microsecondsPerBeat\r\n   */\r\n  addCriticalPoint(delta, microsecondsPerBeat) {\r\n    this.criticalPoints.push({\r\n      delta,\r\n      microsecondsPerBeat\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {number} delta\r\n   */\r\n  getTime(delta) {\r\n    const microsecondsPerSecond = 1000000;\r\n    let time = 0;\r\n    // midi standard initializes file with this value\r\n    let microsecondsPerBeat = 500000;\r\n\r\n    // iterate through time changes while decrementing delta ticks to 0\r\n    for (let i = 0, criticalPoint; i < this.criticalPoints.length && delta > 0; i++) {\r\n      criticalPoint = this.criticalPoints[i];\r\n\r\n      // incrementally calculate the time passed for each range of timing\r\n      if (delta >= criticalPoint.delta) {\r\n        time += criticalPoint.delta * microsecondsPerBeat / this.ticksPerBeat / microsecondsPerSecond;\r\n        delta -= criticalPoint.delta;\r\n      } else {\r\n        time += delta * microsecondsPerBeat / this.ticksPerBeat / microsecondsPerSecond;\r\n        delta = 0;\r\n      }\r\n\r\n      microsecondsPerBeat = criticalPoint.microsecondsPerBeat;\r\n    }\r\n\r\n    time += delta * microsecondsPerBeat / this.ticksPerBeat / microsecondsPerSecond;\r\n\r\n    return time;\r\n  }\r\n};\r\n\r\nmodule.exports = Timer;\r\n","'use strict';\r\n\r\n// matches occurence of A through G\r\n// followed by positive or negative integer\r\n// followed by 0 to 2 occurences of flat or sharp\r\nconst re = /^([A-G])(\\-?\\d+)(b{0,2}|#{0,2})$/;\r\n\r\nclass WAV {\r\n  /**\r\n   *\r\n   * @param {string} note\r\n   * @returns {number}\r\n   */\r\n  static semitone(note = 'REST') {\r\n\r\n    // if semitone is unrecognized, assume REST\r\n    if (!re.test(note)) {\r\n      return -Infinity;\r\n    }\r\n\r\n    // parse substrings of note\r\n    const [, tone, octave, accidental] = note.match(re) || [];\r\n\r\n    // semitone indexed relative to A4 == 69 for compatibility with MIDI\r\n    const tones = {C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11};\r\n    const octaves = {'-1': 0, 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, 10: 11};\r\n    const accidentals = {bb: -2, b: -1, '': 0, '#': 1, '##': 2};\r\n\r\n    // if semitone is unrecognized, assume REST\r\n    if (tones[tone] === undefined || octaves[octave] === undefined || accidentals[accidental] === undefined) {\r\n      return -Infinity;\r\n    }\r\n\r\n    // return calculated index\r\n    return tones[tone] + octaves[octave] * 12 + accidentals[accidental];\r\n  }\r\n\r\n  static note(semitone = -Infinity) {\r\n    const octaves = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n    const tones = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\r\n\r\n    const octaveIndex = Math.floor(semitone / 12);\r\n    const toneIndex = Math.floor(semitone - octaveIndex * 12);\r\n\r\n    const octave = octaves[octaveIndex];\r\n    const tone = tones[toneIndex];\r\n\r\n    // by default assume REST\r\n    if (octave === undefined || tone === undefined) {\r\n      return 'REST';\r\n    }\r\n\r\n    // tone followed by octave followed by accidental\r\n    return tone.charAt(0) + octave.toString() + tone.charAt(1);\r\n  }\r\n\r\n  /**\r\n   * converts semitone index to frequency in Hz\r\n   * @param {number} semitone\r\n   */\r\n  static frequency(semitone = -Infinity) {\r\n    // A4 is 440 Hz, 12 semitones per octave\r\n    return 440 * Math.pow(2, (semitone - 69) / 12);\r\n  }\r\n\r\n  /**\r\n   * @param {number} numChannels\r\n   * @param {number} sampleRate\r\n   * @param {number} bitsPerSample\r\n   * @param {boolean} littleEndian\r\n   * @param {Array<number>} data\r\n   */\r\n  constructor(numChannels = 1, sampleRate = 44100, bitsPerSample = 16, littleEndian = true, data = []) {\r\n    const bytesPerSample = bitsPerSample >>> 3;\r\n    // WAV header is always 44 bytes\r\n    /** @type {ArrayBuffer} */\r\n    this.header = new ArrayBuffer(44);\r\n    // flexible container for reading / writing raw bytes in header\r\n    /** @type {DataView} */\r\n    this.view = new DataView(this.header);\r\n    // leave sound data as non typed array for more flexibility\r\n    /** @type {Array<number>} */\r\n    this.data = data;\r\n\r\n    // initialize as non-configurable because it\r\n    // causes script to freeze when using parsed\r\n    // chunk sizes with wrong endianess assumed\r\n    Object.defineProperty(this, 'littleEndian', {\r\n      configurable: false,\r\n      enumerable: true,\r\n      value: littleEndian,\r\n      writable: false\r\n    });\r\n\r\n    // initial write index in data array\r\n    this.pointer = 0;\r\n\r\n    // WAV header properties\r\n    this.ChunkID = littleEndian ? 'RIFF' : 'RIFX';\r\n    this.ChunkSize = this.header.byteLength - 8;\r\n    this.Format = 'WAVE';\r\n    this.SubChunk1ID = 'fmt ';\r\n    this.SubChunk1Size = 16;\r\n    this.AudioFormat = 1;\r\n    this.NumChannels = numChannels;\r\n    this.SampleRate = sampleRate;\r\n    this.ByteRate = numChannels * sampleRate * bytesPerSample;\r\n    this.BlockAlign = numChannels * bytesPerSample;\r\n    this.BitsPerSample = bitsPerSample;\r\n    this.SubChunk2ID = 'data';\r\n    this.SubChunk2Size = data.length * bytesPerSample;\r\n    /** @type {boolean} */\r\n    // @ts-expect-error\r\n    this.littleEndian;\r\n  }\r\n\r\n  /**\r\n   * internal setter for writing strings as raw bytes to header\r\n   * @param {string} str\r\n   * @param {number} byteLength\r\n   * @param {number} byteOffset\r\n   */\r\n  setString(str, byteLength = str.length, byteOffset = 0) {\r\n    for (let i = 0; i < byteLength; i++) {\r\n      this.view.setUint8(byteOffset + i, str.charCodeAt(i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * internal getter for reading raw bytes as strings from header\r\n   * @param {number} byteLength\r\n   * @param {number} byteOffset\r\n   */\r\n  getString(byteLength, byteOffset = 0) {\r\n    let str = '';\r\n    for (let i = 0; i < byteLength; i++) {\r\n      str += String.fromCharCode(this.view.getUint8(byteOffset + i));\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n  // header property mutators\r\n\r\n  /**\r\n   * 4 bytes at offset of 0 bytes\r\n   */\r\n  set ChunkID(str) {\r\n    this.setString(str, 4, 0);\r\n  }\r\n\r\n  get ChunkID() {\r\n    return this.getString(4, 0);\r\n  }\r\n\r\n  /**\r\n   * 4 bytes at offset of 4 bytes\r\n   */\r\n  set ChunkSize(uint) {\r\n    this.view.setUint32(4, uint, this.littleEndian);\r\n  }\r\n\r\n  get ChunkSize() {\r\n    return this.view.getUint32(4, this.littleEndian);\r\n  }\r\n\r\n  /**\r\n   * 4 bytes at offset of 8 bytes\r\n   */\r\n  set Format(str) {\r\n    this.setString(str, 4, 8);\r\n  }\r\n\r\n  get Format() {\r\n    return this.getString(4, 8);\r\n  }\r\n\r\n  /**\r\n   * 4 bytes at offset of 12 bytes\r\n   */\r\n  set SubChunk1ID(str) {\r\n    this.setString(str, 4, 12);\r\n  }\r\n\r\n  get SubChunk1ID() {\r\n    return this.getString(4, 12);\r\n  }\r\n\r\n  /**\r\n   * 4 bytes at offset of 16 bytes\r\n   */\r\n  set SubChunk1Size(uint) {\r\n    this.view.setUint32(16, uint, this.littleEndian);\r\n  }\r\n\r\n  get SubChunk1Size() {\r\n    return this.view.getUint32(16, this.littleEndian);\r\n  }\r\n\r\n  /**\r\n   * 2 bytes at offset of 20 bytes\r\n   */\r\n  set AudioFormat(uint) {\r\n    this.view.setUint16(20, uint, this.littleEndian);\r\n  }\r\n\r\n  get AudioFormat() {\r\n    return this.view.getUint16(20, this.littleEndian);\r\n  }\r\n\r\n  /**\r\n   * 2 bytes at offset of 22 bytes\r\n   */\r\n  set NumChannels(uint) {\r\n    this.view.setUint16(22, uint, this.littleEndian);\r\n  }\r\n\r\n  get NumChannels() {\r\n    return this.view.getUint16(22, this.littleEndian);\r\n  }\r\n\r\n  /**\r\n   * 4 bytes at offset of 24 bytes\r\n   */\r\n  set SampleRate(uint) {\r\n    this.view.setUint32(24, uint, this.littleEndian);\r\n  }\r\n\r\n  get SampleRate() {\r\n    return this.view.getUint32(24, this.littleEndian);\r\n  }\r\n\r\n  /**\r\n   * 4 bytes at offset of 28 bytes\r\n   */\r\n  set ByteRate(uint) {\r\n    this.view.setUint32(28, uint, this.littleEndian);\r\n  }\r\n\r\n  get ByteRate() {\r\n    return this.view.getUint32(28, this.littleEndian);\r\n  }\r\n\r\n  /**\r\n   * 2 bytes at offset of 32 bytes\r\n   */\r\n  set BlockAlign(uint) {\r\n    this.view.setUint16(32, uint, this.littleEndian);\r\n  }\r\n\r\n  get BlockAlign() {\r\n    return this.view.getUint16(32, this.littleEndian);\r\n  }\r\n\r\n  /**\r\n   * 2 bytes at offset of 34 bytes\r\n   */\r\n  set BitsPerSample(uint) {\r\n    this.view.setUint16(34, uint, this.littleEndian);\r\n  }\r\n\r\n  get BitsPerSample() {\r\n    return this.view.getUint16(34, this.littleEndian);\r\n  }\r\n\r\n  /**\r\n   * 4 bytes at offset of 36 bytes\r\n   */\r\n  set SubChunk2ID(str) {\r\n    this.setString(str, 4, 36);\r\n  }\r\n\r\n  get SubChunk2ID() {\r\n    return this.getString(4, 36);\r\n  }\r\n\r\n  /**\r\n   * 4 bytes at offset of 40 bytes\r\n   */\r\n  set SubChunk2Size(uint) {\r\n    this.view.setUint32(40, uint, this.littleEndian);\r\n  }\r\n\r\n  get SubChunk2Size() {\r\n    return this.view.getUint32(40, this.littleEndian);\r\n  }\r\n\r\n  /**\r\n   * internal getter for sound data as\r\n   * typed array based on header properties\r\n   */\r\n  get typedData() {\r\n    const bytesPerSample = this.BitsPerSample >>> 3;\r\n    const data = this.data;\r\n    const size = this.SubChunk2Size;\r\n    const samples = size / bytesPerSample;\r\n    const buffer = new ArrayBuffer(size);\r\n    const uint8 = new Uint8Array(buffer);\r\n\r\n    // convert signed normalized sound data to typed integer data\r\n    // i.e. [-1, 1] -> [INT_MIN, INT_MAX]\r\n    const amplitude = Math.pow(2, (bytesPerSample << 3) - 1) - 1;\r\n    let i, d;\r\n\r\n    switch (bytesPerSample) {\r\n    case 1:\r\n      // endianess not relevant for 8-bit encoding\r\n      for (i = 0; i < samples; i++) {\r\n        // convert by adding 0x80 instead of 0x100\r\n        // WAV uses unsigned data for 8-bit encoding\r\n\r\n        // [INT8_MIN, INT8_MAX] -> [0, UINT8_MAX]\r\n        uint8[i] = (data[i] * amplitude + 0x80) & 0xFF;\r\n      }\r\n      break;\r\n    case 2:\r\n      // LSB first\r\n      if (this.littleEndian) {\r\n        for (i = 0; i < samples; i++) {\r\n          // [INT16_MIN, INT16_MAX] -> [0, UINT16_MAX]\r\n          d = (data[i] * amplitude + 0x10000) & 0xFFFF;\r\n\r\n          // unwrap inner loop\r\n          uint8[i * 2    ] = (d      ) & 0xFF;\r\n          uint8[i * 2 + 1] = (d >>> 8);\r\n        }\r\n      // MSB first\r\n      } else {\r\n        for (i = 0; i < samples; i++) {\r\n          // [INT16_MIN, INT16_MAX] -> [0, UINT16_MAX]\r\n          d = (data[i] * amplitude + 0x10000) & 0xFFFF;\r\n\r\n          // unwrap inner loop\r\n          uint8[i * 2    ] = (d >>> 8);\r\n          uint8[i * 2 + 1] = (d      ) & 0xFF;\r\n        }\r\n      }\r\n      break;\r\n    case 3:\r\n      // LSB first\r\n      if (this.littleEndian) {\r\n        for (i = 0; i < samples; i++) {\r\n          // [INT24_MIN, INT24_MAX] -> [0, UINT24_MAX]\r\n          d = (data[i] * amplitude + 0x1000000) & 0xFFFFFF;\r\n\r\n          // unwrap inner loop\r\n          uint8[i * 3    ] = (d       ) & 0xFF;\r\n          uint8[i * 3 + 1] = (d >>>  8) & 0xFF;\r\n          uint8[i * 3 + 2] = (d >>> 16);\r\n        }\r\n      // MSB first\r\n      } else {\r\n        for (i = 0; i < samples; i++) {\r\n          // [INT24_MIN, INT24_MAX] -> [0, UINT24_MAX]\r\n          d = (data[i] * amplitude + 0x1000000) & 0xFFFFFF;\r\n\r\n          // unwrap inner loop\r\n          uint8[i * 3    ] = (d >>> 16);\r\n          uint8[i * 3 + 1] = (d >>>  8) & 0xFF;\r\n          uint8[i * 3 + 2] = (d       ) & 0xFF;\r\n        }\r\n      }\r\n      break;\r\n    case 4:\r\n      // LSB first\r\n      if (this.littleEndian) {\r\n        for (i = 0; i < samples; i++) {\r\n          // [INT32_MIN, INT32_MAX] -> [0, UINT32_MAX]\r\n          d = (data[i] * amplitude + 0x100000000) & 0xFFFFFFFF;\r\n\r\n          // unwrap inner loop\r\n          uint8[i * 4    ] = (d       ) & 0xFF;\r\n          uint8[i * 4 + 1] = (d >>>  8) & 0xFF;\r\n          uint8[i * 4 + 2] = (d >>> 16) & 0xFF;\r\n          uint8[i * 4 + 3] = (d >>> 24);\r\n        }\r\n      // MSB first\r\n      } else {\r\n        for (i = 0; i < samples; i++) {\r\n          // [INT32_MIN, INT32_MAX] -> [0, UINT32_MAX]\r\n          d = (data[i] * amplitude + 0x100000000) & 0xFFFFFFFF;\r\n\r\n          // unwrap inner loop\r\n          uint8[i * 4    ] = (d >>> 24);\r\n          uint8[i * 4 + 1] = (d >>> 16) & 0xFF;\r\n          uint8[i * 4 + 2] = (d >>>  8) & 0xFF;\r\n          uint8[i * 4 + 3] = (d       ) & 0xFF;\r\n        }\r\n      }\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  // binary container outputs\r\n\r\n  /**\r\n   * browser-specific\r\n   *\r\n   * generates blob from concatenated typed arrays\r\n   */\r\n  toBlob() {\r\n    return new Blob([this.header, this.typedData], {type: 'audio/wav'});\r\n  }\r\n\r\n  /**\r\n   * Node.js-specific\r\n   *\r\n   * generates buffer from concatenated typed arrays\r\n   */\r\n  toBuffer() {\r\n    return Buffer.concat([Buffer.from(this.header), Buffer.from(this.typedData)]);\r\n  }\r\n\r\n  // pointer mutators\r\n\r\n  /**\r\n   * gets time (in seconds) of pointer\r\n   */\r\n  tell() {\r\n    return this.pointer / this.NumChannels / this.SampleRate;\r\n  }\r\n\r\n  /**\r\n   * sets time (in seconds) of pointer\r\n   *\r\n   * zero-fills by default\r\n   * @param {number} time\r\n   * @param {boolean} fill\r\n   */\r\n  seek(time, fill = true) {\r\n    const data   = this.data;\r\n    const sample = Math.round(this.SampleRate * time);\r\n\r\n    this.pointer = this.NumChannels * sample;\r\n\r\n    if (fill) {\r\n      // zero-fill seek\r\n      while (data.length < this.pointer) {\r\n        data[data.length] = 0;\r\n      }\r\n    } else {\r\n      this.pointer = data.length;\r\n    }\r\n  }\r\n\r\n  // sound data mutators\r\n\r\n  /**\r\n   * writes the specified note to the sound data\r\n   * for amount of time in seconds\r\n   * at given normalized amplitude\r\n   * to channels listed (or all by default)\r\n   * adds to existing data by default\r\n   * and does not reset write index after operation by default\r\n   * @param {{ note: string; time: number; amplitude?: number; }} param0\r\n   * @param {Array<number>} channels\r\n   * @param {boolean} blend\r\n   * @param {boolean} reset\r\n   */\r\n  writeNote({note, time, amplitude = 1}, channels = [], blend = true, reset = false) {\r\n    // creating local references to properties\r\n    const data = this.data;\r\n    const numChannels = this.NumChannels;\r\n    const sampleRate = this.SampleRate;\r\n\r\n    // to prevent sound artifacts\r\n    const fadeSeconds = 0.001;\r\n\r\n    // calculating properties of given note\r\n    const semitone = WAV.semitone(note);\r\n    const frequency = WAV.frequency(semitone) * Math.PI * 2 / sampleRate;\r\n\r\n    // amount of blocks to be written\r\n    const blocksOut = Math.round(sampleRate * time);\r\n    // reduces sound artifacts by fading at last fadeSeconds\r\n    const nonZero = blocksOut - sampleRate * fadeSeconds;\r\n    // fade interval in samples\r\n    const fade = blocksOut - nonZero + 1;\r\n\r\n    // index of start and stop samples\r\n    const start = this.pointer;\r\n    const stop = data.length;\r\n\r\n    // determines amount of blocks to be updated\r\n    const blocksIn = Math.min(Math.floor((stop - start) / numChannels), blocksOut);\r\n\r\n    // i = index of each sample block\r\n    // j = index of each channel in a block\r\n    // k = cached index of data\r\n    // d = sample data value\r\n    let i, j, k, d;\r\n\r\n    // by default write to all channels\r\n    if (channels.length === 0) {\r\n      // don't overwrite passed array\r\n      channels = [];\r\n\r\n      for (i = 0; i < numChannels; i++) {\r\n        channels[i] = i;\r\n      }\r\n    }\r\n\r\n    // inline .indexOf() function calls into array references\r\n    /** @type {Array<boolean>} */\r\n    const skipChannel = [];\r\n\r\n    for (i = 0; i < numChannels; i++) {\r\n      skipChannel[i] = (channels.indexOf(i) === -1);\r\n    }\r\n\r\n    // update existing data\r\n    for (i = 0; i < blocksIn; i++) {\r\n      // iterate through specified channels\r\n      for (j = 0; j < channels.length; j++) {\r\n        k = start + i * numChannels + channels[j];\r\n        d = 0;\r\n\r\n        if (frequency > 0) {\r\n          d = amplitude * Math.sin(frequency * i) * ((i < fade) ? i : (i > nonZero) ? blocksOut - i + 1 : fade) / fade;\r\n        }\r\n\r\n        data[k] = d + (blend ? data[k] : 0);\r\n      }\r\n    }\r\n\r\n    // append data\r\n    for (i = blocksIn; i < blocksOut; i++) {\r\n      k = start + i * numChannels;\r\n\r\n      // iterate through all channels\r\n      for (j = 0; j < numChannels; j++) {\r\n        d = 0;\r\n\r\n        // only write non-zero data to specified channels\r\n        if (frequency > 0 || !skipChannel[j]) {\r\n          d = amplitude * Math.sin(frequency * i) * ((i < fade) ? i : (i > nonZero) ? blocksOut - i + 1 : fade) / fade;\r\n        }\r\n\r\n        data[k + j] = d;\r\n      }\r\n    }\r\n\r\n    // update header properties\r\n    const end = Math.max(start + blocksOut * numChannels, stop) * this.BitsPerSample >>> 3;\r\n\r\n    this.ChunkSize = end + this.header.byteLength - 8;\r\n    this.SubChunk2Size = end;\r\n\r\n    if (!reset) {\r\n      // move write index to end of written data\r\n      this.pointer = start + blocksOut * numChannels;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * adds specified notes in series\r\n   * (or asynchronously if offset property is specified in a note)\r\n   * each playing for time * relativeDuration seconds\r\n   * followed by a time * (1 - relativeDuration) second rest\r\n   * @param {Array<{ note: string; time: number; amplitude?: number; offset?: number; }>} notes\r\n   * @param {number} amplitude\r\n   * @param {Array<number>} channels\r\n   * @param {boolean} blend\r\n   * @param {boolean} reset\r\n   * @param {number} relativeDuration\r\n   */\r\n  writeProgression(notes, amplitude = 1, channels = [], blend = true, reset = false, relativeDuration = 1) {\r\n    const start = this.pointer;\r\n\r\n    for (let i = 0, note, time, amp, off, secs, rest; i < notes.length; i++) {\r\n      ({note, time, amplitude: amp, offset: off} = notes[i]);\r\n\r\n      // for asynchronous progression\r\n      if (off !== undefined) {\r\n        this.seek(off);\r\n      }\r\n\r\n      if (relativeDuration === 1 || note === 'REST') {\r\n        this.writeNote({note, time, amplitude: amp === undefined ? amplitude : amp * amplitude}, channels, blend, false);\r\n      } else {\r\n        secs = time * relativeDuration;\r\n        rest = time - secs;\r\n\r\n        this.writeNote({note: note, time: secs, amplitude: amp === undefined ? amplitude : amp * amplitude}, channels, blend, false);\r\n        this.writeNote({note: 'REST', time: rest}, channels, blend, false);\r\n      }\r\n    }\r\n\r\n    if (reset) {\r\n      this.pointer = start;\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = WAV;\r\n","'use strict';\r\n\r\nmodule.exports = {\r\n  WAV: require('./src/wav'),\r\n  MIDIStream: require('./src/midi'),\r\n  midiToWav: require('./src/midi2wav')\r\n};\r\n"]}